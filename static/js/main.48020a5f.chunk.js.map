{"version":3,"sources":["components/quote-loader.js","components/App.js","serviceWorker.js","index.js"],"names":["QuoteLoader","props","fetchARandomQuote","axios","method","url","headers","then","response","quotes","data","numOfQuotes","length","randomQuote","Math","floor","random","setState","quote","catch","err","console","log","tweetTheQuote","tweetText","encodeURIComponent","state","text","author","tweetUrl","window","open","bind","this","id","hidden","className","onClick","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oWAyFeA,E,kDAlFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAcVC,kBAAoB,WAEhBC,IAAM,CACFC,OAAQ,MACRC,IAAK,8BACLC,QAAS,KAERC,MAAK,SAACC,GACH,IAAMC,EAASD,EAASE,KAClBC,EAAcF,EAAOG,OACrBC,EAAcJ,EAChBK,KAAKC,MACDD,KAAKE,UAAYL,EAAc,KAIvC,EAAKM,SAAS,CACVC,MAAOL,OAGdM,OAAM,SAACC,GACJC,QAAQC,IAAIF,OApCL,EAwCnBG,cAAgB,WACZ,IAAMC,EAAYC,mBACd,EAAKC,MAAMR,MAAMS,KAChB,KACC,EAAKD,MAAMR,MAAMU,OAAS,EAAKF,MAAMR,MAAMU,OAAS,YAEpDC,EAAQ,gDAA4CL,EAA5C,yCACdM,OAAOC,KAAKF,EAAU,WA7CtB,EAAKH,MAAQ,CACTR,MAAO,IAGX,EAAKhB,kBAAoB,EAAKA,kBAAkB8B,KAAvB,gBACzB,EAAKT,cAAgB,EAAKA,cAAcS,KAAnB,gBAPN,E,gEAYfC,KAAK/B,sB,+BAuCL,OACI,yBAAKgC,GAAG,cACJ,yBAAKA,GAAG,aACJ,yBAAKA,GAAG,OAAOC,QAASF,KAAKP,MAAMR,MAAMS,MACpCM,KAAKP,MAAMR,MAAMS,MAEtB,yBAAKO,GAAG,UAAR,KACOD,KAAKP,MAAMR,MAAMU,OAASK,KAAKP,MAAMR,MAAMU,OAAS,WAE3D,yBAAKQ,UAAU,gBACX,uBACIA,UAAU,cACVC,QAASJ,KAAKV,eAFlB,SAKA,4BACIW,GAAG,YACHG,QAASJ,KAAK/B,mBAFlB,oB,GApEEoC,IAAMC,WCOjBC,MARf,WACE,OACE,6BACI,kBAAC,EAAD,QCKYC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.48020a5f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './quote-loader.scss';\nimport axios from 'axios';\n\nclass QuoteLoader extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            quote: {}\n        }\n        // Bind the fetch a random quote\n        this.fetchARandomQuote = this.fetchARandomQuote.bind(this);\n        this.tweetTheQuote = this.tweetTheQuote.bind(this);\n    }\n\n    componentDidMount() {\n        // Get a random quote and set the state\n        this.fetchARandomQuote();\n    }\n\n    fetchARandomQuote = () => {\n        // Make a request to the API to fetch a new quote every time the page loads\n        axios({\n            method: 'get',\n            url: 'https://type.fit/api/quotes',\n            headers: {  }\n        })\n            .then((response) => {\n                const quotes = response.data;\n                const numOfQuotes = quotes.length;\n                const randomQuote = quotes[\n                    Math.floor(\n                        Math.random() * (numOfQuotes - 1)\n                    )\n                ];\n                // Update the current state and set the inspirational quote\n                this.setState({\n                    quote: randomQuote\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    tweetTheQuote = () => {\n        const tweetText = encodeURIComponent(\n            this.state.quote.text\n            +' '\n            +(this.state.quote.author ? this.state.quote.author : 'Unknown')\n        );\n        const tweetUrl = `https://twitter.com/intent/tweet?text=${tweetText}&hashtags=quotes&related=freecodecamp`;\n        window.open(tweetUrl, '_blank');\n    }\n\n    render() {\n        return (\n            <div id=\"quote-page\">\n                <div id=\"quote-box\">\n                    <div id=\"text\" hidden={!this.state.quote.text}>\n                        {this.state.quote.text}\n                    </div>\n                    <div id=\"author\">\n                        - {this.state.quote.author ? this.state.quote.author : 'Unknown'}\n                    </div>\n                    <div className=\"button-group\">\n                        <a \n                            className=\"tweet-quote\"\n                            onClick={this.tweetTheQuote}>\n                            Tweet\n                        </a>\n                        <button \n                            id=\"new-quote\"\n                            onClick={this.fetchARandomQuote}>\n                            New Quote\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nQuoteLoader.propTypes = {\n\n};\n\nexport default QuoteLoader;","import React from 'react';\nimport './App.scss';\nimport QuoteLoader from './quote-loader';\n\nfunction App() {\n  return (\n    <div>\n        <QuoteLoader></QuoteLoader>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}